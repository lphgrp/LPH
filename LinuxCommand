Linux directory structure
-------------------------------

/
Primary hierarchy root and root directory of the entire file system hierarchy.

/bin
Essential command binaries that need to be available in single user mode; for all users, e.g., cat, ls, cp.

/boot
Boot loader files, e.g., kernels, initrd.

/dev
Essential device files, e.g., /dev/null.

/etc
Host-specific system-wide configuration files
There has been controversy over the meaning of the name itself. In early versions of the UNIX Implementation Document from Bell labs, /etc is referred to as the etcetera directory,[3] as this directory historically held everything that did not belong elsewhere (however, the FHS restricts /etc to static configuration files and may not contain binaries).[4] Since the publication of early documentation, the directory name has been re-explained in various ways. Recent interpretations include backronyms such as "Editable Text Configuration" or "Extended Tool Chest".[5]

/etc/opt
Configuration files for add-on packages that are stored in /opt.

/etc/sgml
Configuration files, such as catalogs, for software that processes SGML.

/etc/X11
Configuration files for the X Window System, version 11.

/etc/xml
Configuration files, such as catalogs, for software that processes XML.

/home
Users' home directories, containing saved files, personal settings, etc.

/lib
Libraries essential for the binaries in /bin and /sbin.

/lib<qual>
Alternate format essential libraries. Such directories are optional, but if they exist, they have some requirements.

/media
Mount points for removable media such as CD-ROMs (appeared in FHS-2.3 in 2004).

/mnt
Temporarily mounted filesystems.

/opt
Optional application software packages.[6]

/proc
Virtual filesystem providing process and kernel information as files. In Linux, corresponds to a procfs mount. Generally automatically generated and populated by the system, on the fly.

/root
Home directory for the root user.

/run
Run-time variable data: Information about the running system since last boot, e.g., currently logged-in users and running daemons. Files under this directory must be either removed or truncated at the beginning of the boot process; but this is not necessary on systems that provide this directory as a temporary filesystem (tmpfs).

/sbin
Essential system binaries, e.g., fsck, init, route.

/srv
Site-specific data served by this system, such as data and scripts for web servers, data offered by FTP servers, and repositories for version control systems (appeared in FHS-2.3 in 2004).

/sys
Contains information about devices, drivers, and some kernel features.[7]

/tmp
Temporary files (see also /var/tmp). Often not preserved between system reboots, and may be severely size restricted.

/usr
Secondary hierarchy for read-only user data; contains the majority of (multi-)user utilities and applications.[8]

/usr/bin
Non-essential command binaries (not needed in single user mode); for all users.

/usr/include
Standard include files.

/usr/lib
Libraries for the binaries in /usr/bin and /usr/sbin.

/usr/lib<qual>
Alternate format libraries, e.g. /usr/lib32 for 32-bit libraries on a 64-bit machine (optional).

/usr/local
Tertiary hierarchy for local data, specific to this host. Typically has further subdirectories, e.g., bin, lib, share.[9]

/usr/sbin
Non-essential system binaries, e.g., daemons for various network-services.

/usr/share
Architecture-independent (shared) data.

/usr/src
Source code, e.g., the kernel source code with its header files.

/usr/X11R6
X Window System, Version 11, Release 6 (up to FHS-2.3, optional).

/var
Variable files—files whose content is expected to continually change during normal operation of the system—such as logs, spool files, and temporary e-mail files.

/var/cache
Application cache data. Such data are locally generated as a result of time-consuming I/O or calculation. The application must be able to regenerate or restore the data. The cached files can be deleted without loss of data.

/var/lib
State information. Persistent data modified by programs as they run, e.g., databases, packaging system metadata, etc.

/var/lock
Lock files. Files keeping track of resources currently in use.

/var/log
Log files. Various logs.

/var/mail
Mailbox files. In some distributions, these files may be located in the deprecated /var/spool/mail.

/var/opt
Variable data from add-on packages that are stored in /opt.

/var/run
Run-time variable data. This directory contains system information data describing the system since it was booted.[10]
In FHS 3.0, /var/run is replaced by /run; a system should either continue to provide a /var/run directory, or provide a symbolic link from /var/run to /run, for backwards compatibility.[11]

/var/spool
Spool for tasks waiting to be processed, e.g., print queues and outgoing mail queue.

/var/spool/mail
Deprecated location for users' mailboxes.[12]

/var/tmp
Temporary files to be preserved between reboots.
=================================================================================================================================================================
Commands:


cat - 
The cat command (short for “concatenate”) lists the contents of files to the terminal window. This is faster than opening the file in an editor, and there’s no chance you can accidentally alter the file. To read the contents of your test file, type the following command while the home directory is your current working directory, as it is by default:

cat test

cd -
The cd command changes your current directory

If you are changing to a directory that is within your current directory, you can simply type cd and the name of the other directory.
cd test

If you are changing to a directory elsewhere within the filesystem directory tree, provide the path to the directory with a leading /.
cd /home/test

go to your home directory, use the ~ (tilde) character as the directory name
cd ~

chmod -
The chmod command sets the file permissions flags on a file or folder. The flags define who can read, write to or execute the file. When you list files with the -l (long format) option you’ll see a string of characters that look like

One way to use chmod is to provide the permissions you wish to give to the owner, group, and others as a 3 digit number.  The leftmost digit represents the owner. The middle digit represents the group. The rightmost digit represents the others. The digits you can use and what they represent are listed here:

0: No permission
1: Execute permission
2: Write permission
3: Write and execute permissions
4: Read permission
5: Read and execute permissions
6: Read and write permissions
7: Read, write and execute permissions

To set the permission to be read, write, and execute (7 from our list) for the owner; read and write (6 from our list) for the group; and read and execute (5 from our list) for the others we’d need to use the digits 765 with the chmod command:
chmod 765 test

df-
The df command shows the size, used space, and available space on the mounted filesystems of your computer.

Two of the most useful options are the -h (human readable) and -x (exclude) options. The human-readable option displays the sizes in Mb or Gb instead of in bytes.
df -h directory name

diff-
The diff command compares two text files and shows the differences between them.
diff test test1

find-
Use the find command to track down files that you know exist if you can’t remember where you put them
find . -name *test*

find . -type f -name *test*

finger-
The finger command gives you a short dump of information about a user, including the time of the user’s last login, the user’s home directory, and the user account’s full name.
finger osboxes

grep -
The grep utility searches for lines which contain a search pattern.
grep am test

gzip -
The gzip command compresses files. By default, it removes the original file and leaves you with the compressed version. To retain both the original and the compressed version, use the -k (keep) option.
gzip test

head-
The head command gives you a listing of the first 10 lines of a file. If you want to see fewer or more lines, use the -n (number) option.
head test
head -n test

history-
The history command lists the commands you have previously issued on the command line
history

kill-
The kill command allows you to terminate a process from the command line. You do this by providing the process ID (PID) of the process to kill.

kill pid

less-
The less command allows you to view files without opening an editor. It’s faster to use, and there’s no chance of you inadvertently modifying the file. With less you can scroll forward and backward through the file using the Up and Down Arrow keys, the PgUp and PgDn keys and the Home and End keys

less test

ls-
It lists the files and folders in the directory you specify. By default, ls looks in the current directory.

ls -lrt - shows file in reversal order of time

man-
The man pages are the user manual for that command.

man wc

mkdir-
The mkdir command allows you to create new directories in the filesystem. You must provide the name of the new directory to mkdir. If the new directory is not going to be within the current directory, you must provide the path to the new directory.

mkdir test

mv-
The mv command allows you to move files and directories from directory to directory. It also allows you to rename files.

mv source destination
mv test test1

ps-
The ps command lists running processes. Using ps without any options causes it to list the processes running in the current shell.
ps

To see every process that is running, use the -e (every process) option:
ps -editor

pwd-
The pwd command prints the working directory (the current directory) from the root / directory.

sudo-
The sudo command is required when performing actions that require root or superuser permissions, such as changing the password for another user.
sudo passwd osboxes

tail-
The tail command gives you a listing of the last 10 lines of a file. If you want to see fewer or more lines, use the -n (number) option.
tail test
tail -n test

uname-
some system information regarding the Linux computer you’re working on with the uname command.
uname -a

w-
The w command lists the currently logged in users.

whoami-
Use whoami to find out who you are logged in as or who is logged into an unmanned Linux terminal.





